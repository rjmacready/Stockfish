(define-module (userscripts)
  #:export (evaluate get-multipv pick-best))


(define (__evaluate pos v)
  (+ (- (random 1000) 500) v))

(define (evaluate pos v)
  v)

(define (_evaluate pos v)
  (if (= (side-to-move pos) 0)
      v
      (* -1 v)))

(define (map-pv pv fn)
  (let ((len (get-pv-len pv)))
;    (if (< 0 len)
	(do ((i 0 (1+ i)))
	    ((>= i len))
	  (let ((entry (get-pv-entry-at pv i)))
	    ;(display "call function on ")
	    ;(display i)
	    ;(display "\n")
	    (apply fn (list entry i))))))
;	#f)))

(define (map-roots roots fn)
  (let ((len (get-root-moves-len roots)))
;    (if (< 0 len)
	(do ((i 0 (1+ i)))
	    ((>= i len))
	  (let ((entry (get-root-move-at roots i)))
	    (apply fn (list entry i))))))
;	#f)))

(define (pick-best multiPV)
  (display "pick-best was called\n")
  (let* ((root-moves (get-root-moves))
	(head-move (get-root-move-at root-moves 0))
	(score (get-score head-move))
	(pv (get-pv head-move))
	(len (get-pv-len pv))
	(entry (get-pv-entry-at pv 0)))
    (display "called get-root-moves\n")

    (map-roots root-moves
	       (lambda (entry i)
		 (display "root ")
		 (display i)
		 (display "\n")

		 (let ((pv (get-pv entry)))
		   ;(display "get-pv with result\n")
		   (map-pv pv (lambda (entry i)
				(display "\t")
				(display (to-str entry))
				(display " ")
				(display (get-score entry))
				(display "\n"))))
		 ))
    
    (display "score of 1st move is ")
    (display score)
    (display " ")
    (display (to-str entry))
    (display " there are ")
    (display len)
    (display " moves\n")
    ))

(define (get-multipv)
  8)
